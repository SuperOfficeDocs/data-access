### YamlMime:ManagedReference
items:
- uid: SuperOffice.License.LicenseCache
  commentId: T:SuperOffice.License.LicenseCache
  id: LicenseCache
  parent: SuperOffice.License
  children:
  - SuperOffice.License.LicenseCache.GetCachedTableNumbers
  - SuperOffice.License.LicenseCache.GetCurrent
  - SuperOffice.License.LicenseCache.GetLoginRightModule(SuperOffice.License.UserType)
  - SuperOffice.License.LicenseCache.GetLoginRightModuleId(SuperOffice.License.UserType)
  - SuperOffice.License.LicenseCache.GetModule(System.Int32)
  - SuperOffice.License.LicenseCache.GetModule(System.String)
  - SuperOffice.License.LicenseCache.GetModule(System.String,System.String)
  - SuperOffice.License.LicenseCache.GetModules(System.String)
  - SuperOffice.License.LicenseCache.GetOwner(System.Int32)
  - SuperOffice.License.LicenseCache.GetOwner(System.String)
  - SuperOffice.License.LicenseCache.GetOwnerModules(System.String)
  - SuperOffice.License.LicenseCache.GetOwners
  - SuperOffice.License.LicenseCache.GetSiteLicenses
  - SuperOffice.License.LicenseCache.OnFlush
  - SuperOffice.License.LicenseCache.OnRefresh
  langs:
  - csharp
  - vb
  name: LicenseCache
  nameWithType: LicenseCache
  fullName: SuperOffice.License.LicenseCache
  type: Class
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nCache containing list of all module owners, module licenses, system licenses and satellite licenses.  \nAssociate licenses are not covered by this cache as this might cause the cache to be too slow.\n"
  syntax:
    content: 'public sealed class LicenseCache : CacheBase, IDisposable, IFlushable'
    content.vb: >-
      Public NotInheritable Class LicenseCache
          Inherits CacheBase
          Implements IDisposable, IFlushable
  inheritance:
  - System.Object
  - SuperOffice.Data.Cache.CacheBase
  implements:
  - System.IDisposable
  - SuperOffice.Data.Cache.IFlushable
  inheritedMembers:
  - SuperOffice.Data.Cache.CacheBase._lastUpdated
  - SuperOffice.Data.Cache.CacheBase._cacheState
  - SuperOffice.Data.Cache.CacheBase.IsCacheInvalidated(System.Int32,SuperOffice.Data.SQL.SqlType,System.Int32)
  - SuperOffice.Data.Cache.CacheBase.Dispose
  - SuperOffice.Data.Cache.CacheBase.Validate
  - SuperOffice.Data.Cache.CacheBase.Refresh
  - SuperOffice.Data.Cache.CacheBase.Flush
  - SuperOffice.Data.Cache.CacheBase.OnExpired
  - SuperOffice.Data.Cache.CacheBase.OnRefreshed
  - SuperOffice.Data.Cache.CacheBase.OnFlushed
  - SuperOffice.Data.Cache.CacheBase.OnDisposed
  - SuperOffice.Data.Cache.CacheBase.Lock
  - SuperOffice.Data.Cache.CacheBase.Name
  - SuperOffice.Data.Cache.CacheBase.CacheType
  - SuperOffice.Data.Cache.CacheBase.Timeout
  - SuperOffice.Data.Cache.CacheBase.State
  - SuperOffice.Data.Cache.CacheBase.IsValid
  - SuperOffice.Data.Cache.CacheBase.Expired
  - SuperOffice.Data.Cache.CacheBase.Refreshed
  - SuperOffice.Data.Cache.CacheBase.Flushed
  - SuperOffice.Data.Cache.CacheBase.Disposed
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.License.LicenseCache.EnumUtil.MapEnums``2
  - SuperOffice.License.LicenseCache.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: SuperOffice.License.LicenseCache.GetCachedTableNumbers
  commentId: M:SuperOffice.License.LicenseCache.GetCachedTableNumbers
  id: GetCachedTableNumbers
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetCachedTableNumbers()
  nameWithType: LicenseCache.GetCachedTableNumbers()
  fullName: SuperOffice.License.LicenseCache.GetCachedTableNumbers()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: public override int[] GetCachedTableNumbers()
    return:
      type: System.Int32[]
    content.vb: Public Overrides Function GetCachedTableNumbers As Integer()
  overridden: SuperOffice.Data.Cache.CacheBase.GetCachedTableNumbers
  overload: SuperOffice.License.LicenseCache.GetCachedTableNumbers*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SuperOffice.License.LicenseCache.OnFlush
  commentId: M:SuperOffice.License.LicenseCache.OnFlush
  id: OnFlush
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: OnFlush()
  nameWithType: LicenseCache.OnFlush()
  fullName: SuperOffice.License.LicenseCache.OnFlush()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: protected override void OnFlush()
    content.vb: Protected Overrides Sub OnFlush
  overridden: SuperOffice.Data.Cache.CacheBase.OnFlush
  overload: SuperOffice.License.LicenseCache.OnFlush*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: SuperOffice.License.LicenseCache.OnRefresh
  commentId: M:SuperOffice.License.LicenseCache.OnRefresh
  id: OnRefresh
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: OnRefresh()
  nameWithType: LicenseCache.OnRefresh()
  fullName: SuperOffice.License.LicenseCache.OnRefresh()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: protected override void OnRefresh()
    content.vb: Protected Overrides Sub OnRefresh
  overridden: SuperOffice.Data.Cache.CacheBase.OnRefresh
  overload: SuperOffice.License.LicenseCache.OnRefresh*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: SuperOffice.License.LicenseCache.GetOwners
  commentId: M:SuperOffice.License.LicenseCache.GetOwners
  id: GetOwners
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetOwners()
  nameWithType: LicenseCache.GetOwners()
  fullName: SuperOffice.License.LicenseCache.GetOwners()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nReturn all module owners\n"
  syntax:
    content: public IEnumerable<ModuleOwnerRow> GetOwners()
    return:
      type: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.ModuleOwnerRow}
    content.vb: Public Function GetOwners As IEnumerable(Of ModuleOwnerRow)
  overload: SuperOffice.License.LicenseCache.GetOwners*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.GetOwner(System.Int32)
  commentId: M:SuperOffice.License.LicenseCache.GetOwner(System.Int32)
  id: GetOwner(System.Int32)
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetOwner(Int32)
  nameWithType: LicenseCache.GetOwner(Int32)
  fullName: SuperOffice.License.LicenseCache.GetOwner(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet Module owner from id\n"
  syntax:
    content: public ModuleOwnerRow GetOwner(int moduleOwnerId)
    parameters:
    - id: moduleOwnerId
      type: System.Int32
      description: Id of module owner
    return:
      type: SuperOffice.CRM.Rows.ModuleOwnerRow
      description: Module owner from Id. Null is returned if the owner is not held by the cache.
    content.vb: Public Function GetOwner(moduleOwnerId As Integer) As ModuleOwnerRow
  overload: SuperOffice.License.LicenseCache.GetOwner*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.GetOwner(System.String)
  commentId: M:SuperOffice.License.LicenseCache.GetOwner(System.String)
  id: GetOwner(System.String)
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetOwner(String)
  nameWithType: LicenseCache.GetOwner(String)
  fullName: SuperOffice.License.LicenseCache.GetOwner(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet module owner from the owner name\n"
  syntax:
    content: public ModuleOwnerRow GetOwner(string moduleOwner)
    parameters:
    - id: moduleOwner
      type: System.String
      description: Name of the module owner
    return:
      type: SuperOffice.CRM.Rows.ModuleOwnerRow
      description: Module owner from name. Null is returned if the owner is not held by the cache.
    content.vb: Public Function GetOwner(moduleOwner As String) As ModuleOwnerRow
  overload: SuperOffice.License.LicenseCache.GetOwner*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.GetModule(System.Int32)
  commentId: M:SuperOffice.License.LicenseCache.GetModule(System.Int32)
  id: GetModule(System.Int32)
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetModule(Int32)
  nameWithType: LicenseCache.GetModule(Int32)
  fullName: SuperOffice.License.LicenseCache.GetModule(System.Int32)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet Module License from a module license id.\n"
  syntax:
    content: public ModuleLicenseRow GetModule(int moduleId)
    parameters:
    - id: moduleId
      type: System.Int32
      description: Primary key of the module license to get.
    return:
      type: SuperOffice.CRM.Rows.ModuleLicenseRow
      description: Module license from module id.  Null is returned if the module license is not held by the cache.
    content.vb: Public Function GetModule(moduleId As Integer) As ModuleLicenseRow
  overload: SuperOffice.License.LicenseCache.GetModule*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.GetModule(System.String)
  commentId: M:SuperOffice.License.LicenseCache.GetModule(System.String)
  id: GetModule(System.String)
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetModule(String)
  nameWithType: LicenseCache.GetModule(String)
  fullName: SuperOffice.License.LicenseCache.GetModule(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet a module from the modules full name, formatted like [ModuleOwner].[ModuleName].\n"
  syntax:
    content: public ModuleLicenseRow GetModule(string fullName)
    parameters:
    - id: fullName
      type: System.String
      description: Modules full name, formatted like [ModuleOwner].[ModuleName]
    return:
      type: SuperOffice.CRM.Rows.ModuleLicenseRow
      description: "\nModule license from module owner name and the module name.  \nNull is returned if the module license is not held by the cache.\n"
    content.vb: Public Function GetModule(fullName As String) As ModuleLicenseRow
  overload: SuperOffice.License.LicenseCache.GetModule*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.GetModules(System.String)
  commentId: M:SuperOffice.License.LicenseCache.GetModules(System.String)
  id: GetModules(System.String)
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetModules(String)
  nameWithType: LicenseCache.GetModules(String)
  fullName: SuperOffice.License.LicenseCache.GetModules(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nReturn all the module licenses belonging to one owner\n"
  syntax:
    content: public List<ModuleLicenseRow> GetModules(string ownerName)
    parameters:
    - id: ownerName
      type: System.String
    return:
      type: System.Collections.Generic.List{SuperOffice.CRM.Rows.ModuleLicenseRow}
    content.vb: Public Function GetModules(ownerName As String) As List(Of ModuleLicenseRow)
  overload: SuperOffice.License.LicenseCache.GetModules*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.GetLoginRightModule(SuperOffice.License.UserType)
  commentId: M:SuperOffice.License.LicenseCache.GetLoginRightModule(SuperOffice.License.UserType)
  id: GetLoginRightModule(SuperOffice.License.UserType)
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetLoginRightModule(UserType)
  nameWithType: LicenseCache.GetLoginRightModule(UserType)
  fullName: SuperOffice.License.LicenseCache.GetLoginRightModule(SuperOffice.License.UserType)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet the module thay holds the login right for a particular user type.\n"
  syntax:
    content: public ModuleLicenseRow GetLoginRightModule(UserType userType)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
      description: User type to get module that is required for logging on.
    return:
      type: SuperOffice.CRM.Rows.ModuleLicenseRow
      description: Instance of <xref href="SuperOffice.CRM.Rows.ModuleLicenseRow" data-throw-if-not-resolved="false"></xref> if the appropriate login-right is found, otherwise null.
    content.vb: Public Function GetLoginRightModule(userType As UserType) As ModuleLicenseRow
  overload: SuperOffice.License.LicenseCache.GetLoginRightModule*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.GetSiteLicenses
  commentId: M:SuperOffice.License.LicenseCache.GetSiteLicenses
  id: GetSiteLicenses
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetSiteLicenses()
  nameWithType: LicenseCache.GetSiteLicenses()
  fullName: SuperOffice.License.LicenseCache.GetSiteLicenses()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet all site module license rows in the database.\n"
  syntax:
    content: public IEnumerable<ModuleLicenseRow> GetSiteLicenses()
    return:
      type: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.ModuleLicenseRow}
      description: All site license rows.
    content.vb: Public Function GetSiteLicenses As IEnumerable(Of ModuleLicenseRow)
  overload: SuperOffice.License.LicenseCache.GetSiteLicenses*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.GetLoginRightModuleId(SuperOffice.License.UserType)
  commentId: M:SuperOffice.License.LicenseCache.GetLoginRightModuleId(SuperOffice.License.UserType)
  id: GetLoginRightModuleId(SuperOffice.License.UserType)
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetLoginRightModuleId(UserType)
  nameWithType: LicenseCache.GetLoginRightModuleId(UserType)
  fullName: SuperOffice.License.LicenseCache.GetLoginRightModuleId(SuperOffice.License.UserType)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet the primary key of the module license holding login right for a partular user type.\n"
  syntax:
    content: public int GetLoginRightModuleId(UserType userType)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
      description: User type.
    return:
      type: System.Int32
      description: "\nPrimary key of the module licese holding login right for a particular user type.  \n0 is returned if the module is not found.\n"
    content.vb: Public Function GetLoginRightModuleId(userType As UserType) As Integer
  overload: SuperOffice.License.LicenseCache.GetLoginRightModuleId*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.GetModule(System.String,System.String)
  commentId: M:SuperOffice.License.LicenseCache.GetModule(System.String,System.String)
  id: GetModule(System.String,System.String)
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetModule(String, String)
  nameWithType: LicenseCache.GetModule(String, String)
  fullName: SuperOffice.License.LicenseCache.GetModule(System.String, System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet module row provided the module owner name and the module name.\n"
  syntax:
    content: public ModuleLicenseRow GetModule(string ownerName, string moduleName)
    parameters:
    - id: ownerName
      type: System.String
      description: Name of the module owner.
    - id: moduleName
      type: System.String
      description: Name of the module license
    return:
      type: SuperOffice.CRM.Rows.ModuleLicenseRow
      description: "\nModule license from module owner name and the module name.  \nNull is returned if the module license is not held by the cache.\n"
    content.vb: Public Function GetModule(ownerName As String, moduleName As String) As ModuleLicenseRow
  overload: SuperOffice.License.LicenseCache.GetModule*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.GetOwnerModules(System.String)
  commentId: M:SuperOffice.License.LicenseCache.GetOwnerModules(System.String)
  id: GetOwnerModules(System.String)
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetOwnerModules(String)
  nameWithType: LicenseCache.GetOwnerModules(String)
  fullName: SuperOffice.License.LicenseCache.GetOwnerModules(System.String)
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet all modules from a owner provided the owner&apos;s name.\n"
  syntax:
    content: public IEnumerable<ModuleLicenseRow> GetOwnerModules(string ownerName)
    parameters:
    - id: ownerName
      type: System.String
      description: Name of the module owner.
    return:
      type: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.ModuleLicenseRow}
      description: Enumerator over all the module licenses provided by a module owner.
    content.vb: Public Function GetOwnerModules(ownerName As String) As IEnumerable(Of ModuleLicenseRow)
  overload: SuperOffice.License.LicenseCache.GetOwnerModules*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.License.LicenseCache.GetCurrent
  commentId: M:SuperOffice.License.LicenseCache.GetCurrent
  id: GetCurrent
  parent: SuperOffice.License.LicenseCache
  langs:
  - csharp
  - vb
  name: GetCurrent()
  nameWithType: LicenseCache.GetCurrent()
  fullName: SuperOffice.License.LicenseCache.GetCurrent()
  type: Method
  source:
    path: SoDataBase
    isExternal: true
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: "\nGet the current license cache.\n"
  syntax:
    content: public static LicenseCache GetCurrent()
    return:
      type: SuperOffice.License.LicenseCache
      description: Current license cache
    content.vb: Public Shared Function GetCurrent As LicenseCache
  overload: SuperOffice.License.LicenseCache.GetCurrent*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: SuperOffice.License
  commentId: N:SuperOffice.License
  isExternal: true
  name: SuperOffice.License
  nameWithType: SuperOffice.License
  fullName: SuperOffice.License
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Data.Cache.CacheBase
  commentId: T:SuperOffice.Data.Cache.CacheBase
  parent: SuperOffice.Data.Cache
  isExternal: true
  name: CacheBase
  nameWithType: CacheBase
  fullName: SuperOffice.Data.Cache.CacheBase
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: SuperOffice.Data.Cache.IFlushable
  commentId: T:SuperOffice.Data.Cache.IFlushable
  parent: SuperOffice.Data.Cache
  isExternal: true
  name: IFlushable
  nameWithType: IFlushable
  fullName: SuperOffice.Data.Cache.IFlushable
- uid: SuperOffice.Data.Cache.CacheBase._lastUpdated
  commentId: F:SuperOffice.Data.Cache.CacheBase._lastUpdated
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: _lastUpdated
  nameWithType: CacheBase._lastUpdated
  fullName: SuperOffice.Data.Cache.CacheBase._lastUpdated
- uid: SuperOffice.Data.Cache.CacheBase._cacheState
  commentId: F:SuperOffice.Data.Cache.CacheBase._cacheState
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: _cacheState
  nameWithType: CacheBase._cacheState
  fullName: SuperOffice.Data.Cache.CacheBase._cacheState
- uid: SuperOffice.Data.Cache.CacheBase.IsCacheInvalidated(System.Int32,SuperOffice.Data.SQL.SqlType,System.Int32)
  commentId: M:SuperOffice.Data.Cache.CacheBase.IsCacheInvalidated(System.Int32,SuperOffice.Data.SQL.SqlType,System.Int32)
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: IsCacheInvalidated(Int32, SqlType, Int32)
  nameWithType: CacheBase.IsCacheInvalidated(Int32, SqlType, Int32)
  fullName: SuperOffice.Data.Cache.CacheBase.IsCacheInvalidated(System.Int32, SuperOffice.Data.SQL.SqlType, System.Int32)
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBase.IsCacheInvalidated(System.Int32,SuperOffice.Data.SQL.SqlType,System.Int32)
    name: IsCacheInvalidated
    nameWithType: CacheBase.IsCacheInvalidated
    fullName: SuperOffice.Data.Cache.CacheBase.IsCacheInvalidated
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.Data.SQL.SqlType
    name: SqlType
    nameWithType: SqlType
    fullName: SuperOffice.Data.SQL.SqlType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBase.IsCacheInvalidated(System.Int32,SuperOffice.Data.SQL.SqlType,System.Int32)
    name: IsCacheInvalidated
    nameWithType: CacheBase.IsCacheInvalidated
    fullName: SuperOffice.Data.Cache.CacheBase.IsCacheInvalidated
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.Data.SQL.SqlType
    name: SqlType
    nameWithType: SqlType
    fullName: SuperOffice.Data.SQL.SqlType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.CacheBase.Dispose
  commentId: M:SuperOffice.Data.Cache.CacheBase.Dispose
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: Dispose()
  nameWithType: CacheBase.Dispose()
  fullName: SuperOffice.Data.Cache.CacheBase.Dispose()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBase.Dispose
    name: Dispose
    nameWithType: CacheBase.Dispose
    fullName: SuperOffice.Data.Cache.CacheBase.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBase.Dispose
    name: Dispose
    nameWithType: CacheBase.Dispose
    fullName: SuperOffice.Data.Cache.CacheBase.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.CacheBase.Validate
  commentId: M:SuperOffice.Data.Cache.CacheBase.Validate
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: Validate()
  nameWithType: CacheBase.Validate()
  fullName: SuperOffice.Data.Cache.CacheBase.Validate()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBase.Validate
    name: Validate
    nameWithType: CacheBase.Validate
    fullName: SuperOffice.Data.Cache.CacheBase.Validate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBase.Validate
    name: Validate
    nameWithType: CacheBase.Validate
    fullName: SuperOffice.Data.Cache.CacheBase.Validate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.CacheBase.Refresh
  commentId: M:SuperOffice.Data.Cache.CacheBase.Refresh
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: Refresh()
  nameWithType: CacheBase.Refresh()
  fullName: SuperOffice.Data.Cache.CacheBase.Refresh()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBase.Refresh
    name: Refresh
    nameWithType: CacheBase.Refresh
    fullName: SuperOffice.Data.Cache.CacheBase.Refresh
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBase.Refresh
    name: Refresh
    nameWithType: CacheBase.Refresh
    fullName: SuperOffice.Data.Cache.CacheBase.Refresh
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.CacheBase.Flush
  commentId: M:SuperOffice.Data.Cache.CacheBase.Flush
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: Flush()
  nameWithType: CacheBase.Flush()
  fullName: SuperOffice.Data.Cache.CacheBase.Flush()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBase.Flush
    name: Flush
    nameWithType: CacheBase.Flush
    fullName: SuperOffice.Data.Cache.CacheBase.Flush
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBase.Flush
    name: Flush
    nameWithType: CacheBase.Flush
    fullName: SuperOffice.Data.Cache.CacheBase.Flush
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.CacheBase.OnExpired
  commentId: M:SuperOffice.Data.Cache.CacheBase.OnExpired
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: OnExpired()
  nameWithType: CacheBase.OnExpired()
  fullName: SuperOffice.Data.Cache.CacheBase.OnExpired()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBase.OnExpired
    name: OnExpired
    nameWithType: CacheBase.OnExpired
    fullName: SuperOffice.Data.Cache.CacheBase.OnExpired
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBase.OnExpired
    name: OnExpired
    nameWithType: CacheBase.OnExpired
    fullName: SuperOffice.Data.Cache.CacheBase.OnExpired
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.CacheBase.OnRefreshed
  commentId: M:SuperOffice.Data.Cache.CacheBase.OnRefreshed
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: OnRefreshed()
  nameWithType: CacheBase.OnRefreshed()
  fullName: SuperOffice.Data.Cache.CacheBase.OnRefreshed()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBase.OnRefreshed
    name: OnRefreshed
    nameWithType: CacheBase.OnRefreshed
    fullName: SuperOffice.Data.Cache.CacheBase.OnRefreshed
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBase.OnRefreshed
    name: OnRefreshed
    nameWithType: CacheBase.OnRefreshed
    fullName: SuperOffice.Data.Cache.CacheBase.OnRefreshed
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.CacheBase.OnFlushed
  commentId: M:SuperOffice.Data.Cache.CacheBase.OnFlushed
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: OnFlushed()
  nameWithType: CacheBase.OnFlushed()
  fullName: SuperOffice.Data.Cache.CacheBase.OnFlushed()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBase.OnFlushed
    name: OnFlushed
    nameWithType: CacheBase.OnFlushed
    fullName: SuperOffice.Data.Cache.CacheBase.OnFlushed
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBase.OnFlushed
    name: OnFlushed
    nameWithType: CacheBase.OnFlushed
    fullName: SuperOffice.Data.Cache.CacheBase.OnFlushed
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.CacheBase.OnDisposed
  commentId: M:SuperOffice.Data.Cache.CacheBase.OnDisposed
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: OnDisposed()
  nameWithType: CacheBase.OnDisposed()
  fullName: SuperOffice.Data.Cache.CacheBase.OnDisposed()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBase.OnDisposed
    name: OnDisposed
    nameWithType: CacheBase.OnDisposed
    fullName: SuperOffice.Data.Cache.CacheBase.OnDisposed
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBase.OnDisposed
    name: OnDisposed
    nameWithType: CacheBase.OnDisposed
    fullName: SuperOffice.Data.Cache.CacheBase.OnDisposed
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Cache.CacheBase.Lock
  commentId: P:SuperOffice.Data.Cache.CacheBase.Lock
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: Lock
  nameWithType: CacheBase.Lock
  fullName: SuperOffice.Data.Cache.CacheBase.Lock
- uid: SuperOffice.Data.Cache.CacheBase.Name
  commentId: P:SuperOffice.Data.Cache.CacheBase.Name
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: Name
  nameWithType: CacheBase.Name
  fullName: SuperOffice.Data.Cache.CacheBase.Name
- uid: SuperOffice.Data.Cache.CacheBase.CacheType
  commentId: P:SuperOffice.Data.Cache.CacheBase.CacheType
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: CacheType
  nameWithType: CacheBase.CacheType
  fullName: SuperOffice.Data.Cache.CacheBase.CacheType
- uid: SuperOffice.Data.Cache.CacheBase.Timeout
  commentId: P:SuperOffice.Data.Cache.CacheBase.Timeout
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: Timeout
  nameWithType: CacheBase.Timeout
  fullName: SuperOffice.Data.Cache.CacheBase.Timeout
- uid: SuperOffice.Data.Cache.CacheBase.State
  commentId: P:SuperOffice.Data.Cache.CacheBase.State
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: State
  nameWithType: CacheBase.State
  fullName: SuperOffice.Data.Cache.CacheBase.State
- uid: SuperOffice.Data.Cache.CacheBase.IsValid
  commentId: P:SuperOffice.Data.Cache.CacheBase.IsValid
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: IsValid
  nameWithType: CacheBase.IsValid
  fullName: SuperOffice.Data.Cache.CacheBase.IsValid
- uid: SuperOffice.Data.Cache.CacheBase.Expired
  commentId: E:SuperOffice.Data.Cache.CacheBase.Expired
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: Expired
  nameWithType: CacheBase.Expired
  fullName: SuperOffice.Data.Cache.CacheBase.Expired
- uid: SuperOffice.Data.Cache.CacheBase.Refreshed
  commentId: E:SuperOffice.Data.Cache.CacheBase.Refreshed
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: Refreshed
  nameWithType: CacheBase.Refreshed
  fullName: SuperOffice.Data.Cache.CacheBase.Refreshed
- uid: SuperOffice.Data.Cache.CacheBase.Flushed
  commentId: E:SuperOffice.Data.Cache.CacheBase.Flushed
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: Flushed
  nameWithType: CacheBase.Flushed
  fullName: SuperOffice.Data.Cache.CacheBase.Flushed
- uid: SuperOffice.Data.Cache.CacheBase.Disposed
  commentId: E:SuperOffice.Data.Cache.CacheBase.Disposed
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: Disposed
  nameWithType: CacheBase.Disposed
  fullName: SuperOffice.Data.Cache.CacheBase.Disposed
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseCache.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<LicenseCache, To>()
  nameWithType: EnumUtil.MapEnums<LicenseCache, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.License.LicenseCache, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of LicenseCache, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.License.LicenseCache, To)()
  name.vb: MapEnums(Of LicenseCache, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<LicenseCache, To>
    nameWithType: EnumUtil.MapEnums<LicenseCache, To>
    fullName: EnumUtil.MapEnums<SuperOffice.License.LicenseCache, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of LicenseCache, To)
    nameWithType: EnumUtil.MapEnums(Of LicenseCache, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.License.LicenseCache, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseCache.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<LicenseCache, To>()
  nameWithType: Converters.MapEnums<LicenseCache, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.LicenseCache, To>()
  nameWithType.vb: Converters.MapEnums(Of LicenseCache, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.LicenseCache, To)()
  name.vb: MapEnums(Of LicenseCache, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<LicenseCache, To>
    nameWithType: Converters.MapEnums<LicenseCache, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.LicenseCache, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of LicenseCache, To)
    nameWithType: Converters.MapEnums(Of LicenseCache, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.LicenseCache, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.Data.Cache
  commentId: N:SuperOffice.Data.Cache
  isExternal: true
  name: SuperOffice.Data.Cache
  nameWithType: SuperOffice.Data.Cache
  fullName: SuperOffice.Data.Cache
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.Cache.CacheBase.GetCachedTableNumbers
  commentId: M:SuperOffice.Data.Cache.CacheBase.GetCachedTableNumbers
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: GetCachedTableNumbers()
  nameWithType: CacheBase.GetCachedTableNumbers()
  fullName: SuperOffice.Data.Cache.CacheBase.GetCachedTableNumbers()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBase.GetCachedTableNumbers
    name: GetCachedTableNumbers
    nameWithType: CacheBase.GetCachedTableNumbers
    fullName: SuperOffice.Data.Cache.CacheBase.GetCachedTableNumbers
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBase.GetCachedTableNumbers
    name: GetCachedTableNumbers
    nameWithType: CacheBase.GetCachedTableNumbers
    fullName: SuperOffice.Data.Cache.CacheBase.GetCachedTableNumbers
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseCache.GetCachedTableNumbers*
  commentId: Overload:SuperOffice.License.LicenseCache.GetCachedTableNumbers
  isExternal: true
  name: GetCachedTableNumbers
  nameWithType: LicenseCache.GetCachedTableNumbers
  fullName: SuperOffice.License.LicenseCache.GetCachedTableNumbers
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SuperOffice.Data.Cache.CacheBase.OnFlush
  commentId: M:SuperOffice.Data.Cache.CacheBase.OnFlush
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: OnFlush()
  nameWithType: CacheBase.OnFlush()
  fullName: SuperOffice.Data.Cache.CacheBase.OnFlush()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBase.OnFlush
    name: OnFlush
    nameWithType: CacheBase.OnFlush
    fullName: SuperOffice.Data.Cache.CacheBase.OnFlush
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBase.OnFlush
    name: OnFlush
    nameWithType: CacheBase.OnFlush
    fullName: SuperOffice.Data.Cache.CacheBase.OnFlush
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseCache.OnFlush*
  commentId: Overload:SuperOffice.License.LicenseCache.OnFlush
  isExternal: true
  name: OnFlush
  nameWithType: LicenseCache.OnFlush
  fullName: SuperOffice.License.LicenseCache.OnFlush
- uid: SuperOffice.Data.Cache.CacheBase.OnRefresh
  commentId: M:SuperOffice.Data.Cache.CacheBase.OnRefresh
  parent: SuperOffice.Data.Cache.CacheBase
  isExternal: true
  name: OnRefresh()
  nameWithType: CacheBase.OnRefresh()
  fullName: SuperOffice.Data.Cache.CacheBase.OnRefresh()
  spec.csharp:
  - uid: SuperOffice.Data.Cache.CacheBase.OnRefresh
    name: OnRefresh
    nameWithType: CacheBase.OnRefresh
    fullName: SuperOffice.Data.Cache.CacheBase.OnRefresh
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.Data.Cache.CacheBase.OnRefresh
    name: OnRefresh
    nameWithType: CacheBase.OnRefresh
    fullName: SuperOffice.Data.Cache.CacheBase.OnRefresh
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseCache.OnRefresh*
  commentId: Overload:SuperOffice.License.LicenseCache.OnRefresh
  isExternal: true
  name: OnRefresh
  nameWithType: LicenseCache.OnRefresh
  fullName: SuperOffice.License.LicenseCache.OnRefresh
- uid: SuperOffice.License.LicenseCache.GetOwners*
  commentId: Overload:SuperOffice.License.LicenseCache.GetOwners
  isExternal: true
  name: GetOwners
  nameWithType: LicenseCache.GetOwners
  fullName: SuperOffice.License.LicenseCache.GetOwners
- uid: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.ModuleOwnerRow}
  commentId: T:System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.ModuleOwnerRow}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ModuleOwnerRow>
  nameWithType: IEnumerable<ModuleOwnerRow>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.CRM.Rows.ModuleOwnerRow>
  nameWithType.vb: IEnumerable(Of ModuleOwnerRow)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.CRM.Rows.ModuleOwnerRow)
  name.vb: IEnumerable(Of ModuleOwnerRow)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.ModuleOwnerRow
    name: ModuleOwnerRow
    nameWithType: ModuleOwnerRow
    fullName: SuperOffice.CRM.Rows.ModuleOwnerRow
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.ModuleOwnerRow
    name: ModuleOwnerRow
    nameWithType: ModuleOwnerRow
    fullName: SuperOffice.CRM.Rows.ModuleOwnerRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SuperOffice.License.LicenseCache.GetOwner*
  commentId: Overload:SuperOffice.License.LicenseCache.GetOwner
  isExternal: true
  name: GetOwner
  nameWithType: LicenseCache.GetOwner
  fullName: SuperOffice.License.LicenseCache.GetOwner
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SuperOffice.CRM.Rows.ModuleOwnerRow
  commentId: T:SuperOffice.CRM.Rows.ModuleOwnerRow
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: ModuleOwnerRow
  nameWithType: ModuleOwnerRow
  fullName: SuperOffice.CRM.Rows.ModuleOwnerRow
- uid: SuperOffice.CRM.Rows
  commentId: N:SuperOffice.CRM.Rows
  isExternal: true
  name: SuperOffice.CRM.Rows
  nameWithType: SuperOffice.CRM.Rows
  fullName: SuperOffice.CRM.Rows
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.License.LicenseCache.GetModule*
  commentId: Overload:SuperOffice.License.LicenseCache.GetModule
  isExternal: true
  name: GetModule
  nameWithType: LicenseCache.GetModule
  fullName: SuperOffice.License.LicenseCache.GetModule
- uid: SuperOffice.CRM.Rows.ModuleLicenseRow
  commentId: T:SuperOffice.CRM.Rows.ModuleLicenseRow
  parent: SuperOffice.CRM.Rows
  isExternal: true
  name: ModuleLicenseRow
  nameWithType: ModuleLicenseRow
  fullName: SuperOffice.CRM.Rows.ModuleLicenseRow
- uid: SuperOffice.License.LicenseCache.GetModules*
  commentId: Overload:SuperOffice.License.LicenseCache.GetModules
  isExternal: true
  name: GetModules
  nameWithType: LicenseCache.GetModules
  fullName: SuperOffice.License.LicenseCache.GetModules
- uid: System.Collections.Generic.List{SuperOffice.CRM.Rows.ModuleLicenseRow}
  commentId: T:System.Collections.Generic.List{SuperOffice.CRM.Rows.ModuleLicenseRow}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ModuleLicenseRow>
  nameWithType: List<ModuleLicenseRow>
  fullName: System.Collections.Generic.List<SuperOffice.CRM.Rows.ModuleLicenseRow>
  nameWithType.vb: List(Of ModuleLicenseRow)
  fullName.vb: System.Collections.Generic.List(Of SuperOffice.CRM.Rows.ModuleLicenseRow)
  name.vb: List(Of ModuleLicenseRow)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.ModuleLicenseRow
    name: ModuleLicenseRow
    nameWithType: ModuleLicenseRow
    fullName: SuperOffice.CRM.Rows.ModuleLicenseRow
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.ModuleLicenseRow
    name: ModuleLicenseRow
    nameWithType: ModuleLicenseRow
    fullName: SuperOffice.CRM.Rows.ModuleLicenseRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseCache.GetLoginRightModule*
  commentId: Overload:SuperOffice.License.LicenseCache.GetLoginRightModule
  isExternal: true
  name: GetLoginRightModule
  nameWithType: LicenseCache.GetLoginRightModule
  fullName: SuperOffice.License.LicenseCache.GetLoginRightModule
- uid: SuperOffice.License.UserType
  isExternal: true
  name: UserType
  nameWithType: UserType
  fullName: SuperOffice.License.UserType
- uid: SuperOffice.License.LicenseCache.GetSiteLicenses*
  commentId: Overload:SuperOffice.License.LicenseCache.GetSiteLicenses
  isExternal: true
  name: GetSiteLicenses
  nameWithType: LicenseCache.GetSiteLicenses
  fullName: SuperOffice.License.LicenseCache.GetSiteLicenses
- uid: System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.ModuleLicenseRow}
  commentId: T:System.Collections.Generic.IEnumerable{SuperOffice.CRM.Rows.ModuleLicenseRow}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ModuleLicenseRow>
  nameWithType: IEnumerable<ModuleLicenseRow>
  fullName: System.Collections.Generic.IEnumerable<SuperOffice.CRM.Rows.ModuleLicenseRow>
  nameWithType.vb: IEnumerable(Of ModuleLicenseRow)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SuperOffice.CRM.Rows.ModuleLicenseRow)
  name.vb: IEnumerable(Of ModuleLicenseRow)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SuperOffice.CRM.Rows.ModuleLicenseRow
    name: ModuleLicenseRow
    nameWithType: ModuleLicenseRow
    fullName: SuperOffice.CRM.Rows.ModuleLicenseRow
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SuperOffice.CRM.Rows.ModuleLicenseRow
    name: ModuleLicenseRow
    nameWithType: ModuleLicenseRow
    fullName: SuperOffice.CRM.Rows.ModuleLicenseRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.License.LicenseCache.GetLoginRightModuleId*
  commentId: Overload:SuperOffice.License.LicenseCache.GetLoginRightModuleId
  isExternal: true
  name: GetLoginRightModuleId
  nameWithType: LicenseCache.GetLoginRightModuleId
  fullName: SuperOffice.License.LicenseCache.GetLoginRightModuleId
- uid: SuperOffice.License.LicenseCache.GetOwnerModules*
  commentId: Overload:SuperOffice.License.LicenseCache.GetOwnerModules
  isExternal: true
  name: GetOwnerModules
  nameWithType: LicenseCache.GetOwnerModules
  fullName: SuperOffice.License.LicenseCache.GetOwnerModules
- uid: SuperOffice.License.LicenseCache.GetCurrent*
  commentId: Overload:SuperOffice.License.LicenseCache.GetCurrent
  isExternal: true
  name: GetCurrent
  nameWithType: LicenseCache.GetCurrent
  fullName: SuperOffice.License.LicenseCache.GetCurrent
- uid: SuperOffice.License.LicenseCache
  commentId: T:SuperOffice.License.LicenseCache
  parent: SuperOffice.License
  isExternal: true
  name: LicenseCache
  nameWithType: LicenseCache
  fullName: SuperOffice.License.LicenseCache
